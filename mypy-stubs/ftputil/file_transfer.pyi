from typing import (
    Any,
    IO,
)

from collections.abc import Generator

from .host import FTPHost

MAX_COPY_CHUNK_SIZE: int

class LocalFile:
    name: str
    mode: int
    def __init__(self, name: str, mode: int) -> None: ...
    def exists(self) -> bool: ...
    def mtime(self) -> float: ...
    def mtime_precision(self) -> float: ...
    def fobj(self) -> IO[bytes]: ...

class RemoteFile:
    name: str
    mode: int
    def __init__(self, ftp_host: FTPHost, name: str, mode: int) -> None: ...
    def exists(self) -> bool: ...
    def mtime(self) -> float: ...
    def mtime_precision(self) -> float: ...
    def fobj(self) -> IO[bytes]: ...

def source_is_newer_than_target(
    source_file: LocalFile | RemoteFile, target_file: LocalFile | RemoteFile
) -> bool: ...
def chunks(
    fobj: IO[bytes], max_chunk_size: int = ...
) -> Generator[bytes, None, None]: ...
def copyfileobj(
    source_fobj: IO[bytes],
    target_fobj: IO[bytes],
    max_chunk_size: int = ...,
    callback: Any | None = None,
) -> None: ...
def copy_file(
    source_file: LocalFile | RemoteFile,
    target_file: LocalFile | RemoteFile,
    conditional: bool,
    callback: Any,
) -> bool: ...
